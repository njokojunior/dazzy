Modification

#terms
AAA : Authentication, Accountability, Availability

# << git commit -a -m "message" >> to add all modifications and commit directly 

#things to consider before committing: 
- create token and set required privileges 
 	steps to create token: 
 		- on your profile image, click and go on settings
 		- scroll at the bottom and click on developer settings
 		- choose the personal access tokens button and choose the classic one
 		- place a note and the required permissions for those having that token
 		

=================================================================================

Steps to Push Over First project: 

1. Create directory for deployment #using the mkdir command
2. Initialize the directory to keep track of any changes in the files #using the git init command 
3. Provide your credentials info so that when committing the author can be Identify
4. Use the << git add >> command to add records so that they should be able to be committed
5. Commit the files using << git commit -m >> command then to the staging area so that you should be able to push it to the git repository.
	Areas in git :
	staging Area: Where your code goes to when committed 
	#when committed, a version of the file is created

nb: << git log >> command to view our commit infos
    use the << git show commitID >> to view all changes that took place in a commit. 
    
6. to prepare items to be sent to github, we use the << git remote add origin websiteLink >>

NB: Create a token before you are able to push. 

7. To push now, we use << git push aliasName branchName >>


#My created token 
	
	group12: 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


================================================================================

Pulling in git: 

- create a directory and initialise git inside 
- link the remote to the your repository
- git pull using the branch # (Make sure you are on thesame branch)

questions: 
- the git repository that is pulled, does it overrides the initial infos of the existing repos? #no

- the pull request where a confirmation is needed is it applicable for all team members? 




#command
	<< git pull alias branchname >>
	
	
	Qs:
	- which scenario is best to use git fetch or git pull? and why?
	merging scenario between a branch and another
	- is master branch by default?
	
================================================================================

Branch Management:

	Creating a New branch 
		<< git branch branchName >>
	Switch from branch to another
		<< git switch branchName >> #branch automatically becomes main branch
		
	
	git config --global init.defaultBranch development: to install default git branch
	
	git branch -m branchName: to add new branch
	
	git Diff:  command is use to fine the difference between 2 same files 
	QI: is it a must to be in the master before merging
	    can we rename a branch?
	git merge branchName: to merge two same files, that are found in 2 different branches
	git push aliasName -all #to push changes to all branches
	
	fetching: 
		git fetch aliasName brnachName
	
	checking what is in the remote repository and our local branch
		<< git diff alias/branchName >>
	
	if changes are ok, we can merge using 
		<< git merge alias/branchName >>
	
================================================================================Integrated development environment

Questions when working with Oranization: 



Critical steps: 
1. Do not jump from one step to another in terms of branching # a code that moves from dev to master is not proper. It must pass through stage first. 



Creating a bugfixed branch from the master branch: from creating a new branch bug_fix while using master branch, we fix the code and submit back to master branch. If the bugs are much, we have to fix the files and send it back to the development branch so that the code should be taken all over and be fix completely.  

#Research on git work_Flow

.gitignore files are used to ignored files in our id that are not part of our project





